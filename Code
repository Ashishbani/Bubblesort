//We are given with an input array
//Choose pivot, here we are choosing the last element as our pivot
//Now partition the array as per pivot
//Keep a partitioned index say p and initialize it to -1
//Iterate through every element in the array except the pivot
//If an element is less than the pivot element then increment p and swap the elements at index p with the element at index i.
//Once all the elements are traversed, swap pivot with element present at p+1 as this will the same position as in the sorted array
//Now return the pivot index
//Once partitioned, now make 2 calls on quicksort
//One from beg to p-1
//Other from p+1 to n-1


#include <bits/stdc++.h> 
using namespace std;  
void swap(int* a, int* b)  
{  
    int t = *a;  
    *a = *b;  
    *b = t;  
}    

int partition (int arr[], int low, int high)  
{  
    int pivot = arr[high];
    int i = (low - 1);
    for (int j = low; j <= high - 1; j++)  
    {       
        if (arr[j] < pivot)  
        {  
            i++;
            swap(&arr[i], &arr[j]);  
        }  
    }  
    swap(&arr[i + 1], &arr[high]);  
    return (i + 1);  
} 

void quickSort(int arr[], int low, int high)  
{  
    if (low < high)  
    {        
        int pi = partition(arr, low, high);     
        quickSort(arr, low, pi - 1);  
        quickSort(arr, pi + 1, high);  
    }  
}  

void printArray(int arr[], int size)  
{  
    int i;  
    for (i = 0; i < size; i++)  
        cout << arr[i] << " ";  
    cout << endl;  
} 

int main()  
{  
    int arr[] = {10, 7, 8, 9, 1, 5};  
    int n = sizeof(arr) / sizeof(arr[0]);  
    quickSort(arr, 0, n - 1);  
    cout << "Sorted array: \n";  
    printArray(arr, n);  
    return 0;  
}  
